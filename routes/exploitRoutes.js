const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const shell = require('shelljs');

const router = express.Router();

// Configuración de Multer para almacenar archivos en memoria
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: { fileSize: 50 * 1024 * 1024 }, // Límite de 50 MB
});

// Endpoint para subir archivos
router.post('/upload', (req, res, next) => {
  upload.single('file')(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      // Error específico de Multer
      return res.status(400).json({ error: `Error de Multer: ${err.message}` });
    } else if (err) {
      // Otro error genérico
      return res.status(500).json({ error: `Error interno: ${err.message}` });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No se subió ningún archivo' });
    }

    try {
      // Guardar el archivo en el sistema temporalmente
      const filePath = `/tmp/${req.file.originalname}`;
      fs.writeFileSync(filePath, req.file.buffer);

      res.json({
        message: 'Archivo subido correctamente',
        filePath,
      });
    } catch (error) {
      console.error('Error al guardar el archivo:', error);
      res.status(500).json({ error: 'Error al guardar el archivo en el sistema' });
    }
  });
});

// Endpoint para ejecutar archivos subidos
router.post('/execute', (req, res) => {
  const { filePath } = req.body;

  if (!filePath || !shell.test('-f', filePath)) {
    return res.status(400).json({ error: 'Archivo no encontrado o ruta inválida' });
  }

  try {
    // Dar permisos de ejecución al archivo
    shell.chmod('+x', filePath);

    // Ejecutar el archivo
    const output = shell.exec(filePath);

    res.json({
      message: 'Archivo ejecutado exitosamente',
      output: output.stdout || output.stderr,
    });
  } catch (error) {
    console.error('Error al ejecutar el archivo:', error);
    res.status(500).json({ error: 'Error al ejecutar el archivo' });
  }
});

module.exports = router;
